import ccxt
import requests
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
import os
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_IDS = os.getenv('CHAT_IDS').split(',') if os.getenv('CHAT_IDS') else []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC —á–µ—Ä–µ–∑ ccxt
mexc = ccxt.mexc()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
last_notified_spread = None
last_notification_time = 0
NOTIFICATION_COOLDOWN = 120  # 2 –º–∏–Ω—É—Ç—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Å–ø—Ä–µ–¥–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å DEX Screener
def get_dexscreener_price(token_address, chain='bsc'):
    try:
        url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}?chainIds={chain}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        print(f"–û—Ç–≤–µ—Ç API: {data}")  # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        if not data or 'pairs' not in data or not data.get('pairs'):
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–∞—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞.")
            return None, None, None

        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∞—Ä —Å USDT –∏–ª–∏ USDC –∫–∞–∫ quoteToken
        for pair in data.get('pairs', []):
            if pair and 'baseToken' in pair and 'quoteToken' in pair:
                base_symbol = pair.get('baseToken', {}).get('symbol')
                quote_symbol = pair.get('quoteToken', {}).get('symbol')
                print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É: base={base_symbol}, quote={quote_symbol}")
                if base_symbol == 'Broccoli' and quote_symbol in ['USDT', 'USDC'] and 'priceUsd' in pair:
                    price_usd = float(pair['priceUsd'])
                    dex_name = pair.get('dexId', 'Unknown DEX')
                    pair_address = pair.get('pairAddress', '')
                    print(f"–ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ (base —Å USDT/USDC): {dex_name}, —Ü–µ–Ω–∞: ${price_usd}")
                    return price_usd, dex_name, pair_address
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–∞—Ä—ã –¥–ª—è BROCCOLIF3B —Å USDT/USDC.")
        return None, None, None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API: {e}")
        return None, None, None
    except (KeyError, ValueError, TypeError) as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    print(f"Chat ID: {chat_id}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chat_id
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø—Ä–µ–¥–∞ BROCCOLIF3B. –ò—Å–ø–æ–ª—å–∑—É–π /price –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–ø—Ä–µ–¥–µ ‚â• 5%.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        BROCCOLIF3B_ADDRESS = '0x12B4356C65340Fb02cdff01293F95FEBb1512F3b'

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å MEXC
        mexc_ticker = mexc.fetch_ticker('BROCCOLIF3B/USDT')
        mexc_price = mexc_ticker['last']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å DEX Screener
        dex_price, dex_name, pair_address = get_dexscreener_price(BROCCOLIF3B_ADDRESS, chain='bsc')

        if dex_price is None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å DEX Screener. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.")
            return

        # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
        spread = abs(mexc_price - dex_price) / min(mexc_price, dex_price) * 100

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üìä –¶–µ–Ω–∞ BROCCOLIF3B:\n"
            f"MEXC: ${mexc_price:.6f}\n"
            f"{dex_name} (DEX, BSC): ${dex_price:.6f}\n"
            f"–°–ø—Ä–µ–¥: {spread:.2f}%\n"
            f"üîó –°—Å—ã–ª–∫–∏:\n"
            f"MEXC: https://www.mexc.com/exchange/BROCCOLIF3B_USDT\n"
            f"DEX Screener: https://dexscreener.com/bsc/{pair_address}"
        )
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–∞
async def check_spread(context: ContextTypes.DEFAULT_TYPE):
    global last_notified_spread, last_notification_time
    try:
        BROCCOLIF3B_ADDRESS = '0x12B4356C65340Fb02cdff01293F95FEBb1512F3b'

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å MEXC
        mexc_ticker = mexc.fetch_ticker('BROCCOLIF3B/USDT')
        mexc_price = mexc_ticker['last']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å DEX Screener
        dex_price, dex_name, pair_address = get_dexscreener_price(BROCCOLIF3B_ADDRESS, chain='bsc')

        if dex_price is None:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å DEX Screener –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.")
            return

        # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
        spread = abs(mexc_price - dex_price) / min(mexc_price, dex_price) * 100

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å–ø—Ä–µ–¥ 0.30% –∏ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        current_time = time.time()
        if spread >= 5 and (last_notified_spread != spread or current_time - last_notification_time >= NOTIFICATION_COOLDOWN):
            message = (
                f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ë–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥ –¥–ª—è BROCCOLIF3B! ‚ö†Ô∏è\n"
                f"MEXC: ${mexc_price:.6f}\n"
                f"{dex_name} (DEX, BSC): ${dex_price:.6f}\n"
                f"–°–ø—Ä–µ–¥: {spread:.2f}%\n"
                f"üîó –°—Å—ã–ª–∫–∏:\n"
                f"MEXC: https://www.mexc.com/exchange/BROCCOLIF3B_USDT\n"
                f"DEX Screener: https://dexscreener.com/bsc/{pair_address}"
            )
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É chat_id
            for chat_id in CHAT_IDS:
                try:
                    await context.bot.send_message(chat_id=chat_id.strip(), text=message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: —Å–ø—Ä–µ–¥ {spread:.2f}%")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            last_notified_spread = spread
            last_notification_time = current_time
        else:
            print(f"–°–ø—Ä–µ–¥ {spread:.2f}% –º–µ–Ω—å—à–µ 0.15% –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {last_notified_spread}, –≤—Ä–µ–º—è: {last_notification_time}).")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("price", price))
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60 —Å–µ–∫—É–Ω–¥)
    application.job_queue.run_repeating(check_spread, interval=60, first=10)
    application.run_polling()

if __name__ == '__main__':
    main()
import ccxt
import requests
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC —á–µ—Ä–µ–∑ ccxt
mexc = ccxt.mexc()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å DEX Screener –Ω–∞ BSC
def get_dexscreener_price(token_address, chain='bsc'):
    try:
        url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}?chainIds={chain}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        print(f"–û—Ç–≤–µ—Ç API: {data}")  # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        if not data or 'pairs' not in data or not data.get('pairs'):
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–∞—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞.")
            return None, None, None

        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∞—Ä —Å USDT –∏–ª–∏ USDC –∫–∞–∫ quoteToken
        for pair in data.get('pairs', []):
            if pair and 'baseToken' in pair and 'quoteToken' in pair:
                base_symbol = pair.get('baseToken', {}).get('symbol')
                quote_symbol = pair.get('quoteToken', {}).get('symbol')
                print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É: base={base_symbol}, quote={quote_symbol}")  # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–∫—É
                if base_symbol == 'Broccoli' and quote_symbol in ['USDT', 'USDC'] and 'priceUsd' in pair:
                    price_usd = float(pair['priceUsd'])
                    dex_name = pair.get('dexId', 'Unknown DEX')
                    pair_address = pair.get('pairAddress', '')
                    print(f"–ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ (base —Å USDT/USDC): {dex_name}, —Ü–µ–Ω–∞: ${price_usd}")
                    return price_usd, dex_name, pair_address
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–∞—Ä—ã –¥–ª—è BROCCOLIF3B —Å USDT/USDC.")
        return None, None, None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API: {e}")
        return None, None, None
    except (KeyError, ValueError, TypeError) as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω BROCCOLIF3B. –ò—Å–ø–æ–ª—å–∑—É–π /price –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏ —Å–ø—Ä–µ–¥–∞.')

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        BROCCOLIF3B_ADDRESS = '0x12B4356C65340Fb02cdff01293F95FEBb1512F3b'

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å MEXC
        mexc_ticker = mexc.fetch_ticker('BROCCOLIF3B/USDT')
        mexc_price = mexc_ticker['last']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å DEX Screener (BSC)
        dex_price, dex_name, pair_address = get_dexscreener_price(BROCCOLIF3B_ADDRESS, chain='bsc')

        if dex_price is None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å DEX Screener. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.")
            return

        # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
        spread = abs(mexc_price - dex_price) / min(mexc_price, dex_price) * 100

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üìä –¶–µ–Ω–∞ BROCCOLIF3B:\n"
            f"MEXC: ${mexc_price:.6f}\n"
            f"{dex_name} (DEX, BSC): ${dex_price:.6f}\n"
            f"–°–ø—Ä–µ–¥: {spread:.2f}%\n"
            f"üîó –°—Å—ã–ª–∫–∏:\n"
            f"MEXC: https://www.mexc.com/exchange/BROCCOLIF3B_USDT\n"
            f"DEX Screener: https://dexscreener.com/bsc/{pair_address}"
        )
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("price", price))
    application.run_polling()

if __name__ == '__main__':
    main()
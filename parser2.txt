import requests
import json

DEX_BASE = "https://api.dexscreener.com"
BOOSTS_TOP = f"{DEX_BASE}/token-boosts/latest/v1"
PAIRS_BY_TOKEN = f"{DEX_BASE}/tokens/v1/{{chainId}}/{{pairId}}"
MEXC_API = "https://www.mexc.com/open/api/v2/market/ticker"
CHAINS = ["solana", "ethereum", "bsc", "base", "sui"]
OUTPUT = "trending_tokens.json"

def fetch_boosts():
    r = requests.get(BOOSTS_TOP)
    r.raise_for_status()
    data = r.json()
    if not isinstance(data, list):
        raise ValueError("‚ùå boost response –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
    return data

def fetch_pair_details(chain_id, token_address):
    url = PAIRS_BY_TOKEN.format(chainId=chain_id, pairId=token_address)
    r = requests.get(url)
    r.raise_for_status()
    data = r.json()

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ list –∏–ª–∏ dict
    if isinstance(data, list):
        for item in data:
            if isinstance(item, dict) and "baseToken" in item:
                return item
    elif isinstance(data, dict):
        pairs = data.get("pairs", [])
        if isinstance(pairs, list):
            for p in pairs:
                if isinstance(p, dict) and "baseToken" in p:
                    return p
    return None

def mexc_listed_exact(symbol):
    try:
        r = requests.get(MEXC_API)
        r.raise_for_status()
        tickers = r.json().get("data", [])
        for t in tickers:
            if t["symbol"].upper() == symbol.upper():
                return True, t["symbol"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ MEXC: {e}")
    return False, None

def main():
    try:
        boosts = fetch_boosts()
        result = []
        print(f"üöÄ –ü–æ–ª—É—á–µ–Ω–æ {len(boosts)} —Ç–æ–∫–µ–Ω–æ–≤ —Å boost‚Äô–∞–º–∏")

        for item in boosts:
            chain = item.get("chainId")
            addr = item.get("tokenAddress")
            if not chain or not addr or chain not in CHAINS:
                continue

            try:
                pair = fetch_pair_details(chain, addr)
                if not pair:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ä—ã –¥–ª—è {addr} [{chain}]")
                    continue

                base = pair.get("baseToken", {})
                symbol = base.get("symbol", "N/A")
                name = base.get("name", "N/A")
                price = pair.get("priceUsd", "N/A")
                volume = float(pair.get("volume", {}).get("h24", 0))

                print(f"\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ {symbol} ({name}) –Ω–∞ —Å–µ—Ç–∏ {chain}")
                print(f"üì¶ –ê–¥—Ä–µ—Å: {addr}")
                print(f"üí≤ –¶–µ–Ω–∞: ${price} | –û–±—ä—ë–º 24—á: ${volume:,.2f}")

                listed, mexc_symbol = mexc_listed_exact(symbol)

                if listed:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¢–û–ß–ù–û –Ω–∞ MEXC: {mexc_symbol}")
                else:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ—á–Ω–æ –Ω–∞ MEXC")

                result.append({
                    "symbol": symbol,
                    "name": name,
                    "address": addr,
                    "chain": chain,
                    "price_usd": price,
                    "volume_usd": volume,
                    "mexc": mexc_symbol if listed else None
                })

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ {addr}: {e}")
                continue

        with open(OUTPUT, "w", encoding="utf-8") as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(result)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ {OUTPUT}")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()

import ccxt
import requests
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, JobQueue
from dotenv import load_dotenv
import os
import time
from typing import List, Tuple

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
if not CHAT_ID:
    raise ValueError("CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env. –£–∫–∞–∂–∏ CHAT_ID —á–∞—Ç–∞, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC —á–µ—Ä–µ–∑ ccxt
mexc = ccxt.mexc()

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ tokens.json
def load_tokens():
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)} at {time.strftime('%H:%M:%S %Z, %d %B %Y')}")
        return tokens
    except FileNotFoundError:
        print("–§–∞–π–ª tokens.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è tokens.json.")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å DEX Screener
def get_dex_price(token_address: str, chain: str):
    try:
        url = f"https://api.dexscreener.com/token-pairs/v1/{chain}/{token_address}"
        response = requests.get(url, headers={'Accept': '*/*'})
        response.raise_for_status()
        data = response.json()
        if data:
            for pair in data:
                if pair and 'baseToken' in pair and 'quoteToken' in pair:
                    quote_symbol = pair.get('quoteToken', {}).get('symbol')
                    if quote_symbol in ['USDT', 'USDC', 'BUSD', 'SOL', 'SUI'] and 'priceUsd' in pair:
                        return float(pair['priceUsd']), pair.get('dexId', 'Unknown DEX'), pair.get('pairAddress', '')
        print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token_address} –Ω–∞ {chain}.")
        return None, None, None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ DEX API –¥–ª—è {token_address} ({chain}): {e}")
        return None, None, None

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–∞
def check_spread_logic(tokens):
    alert_list: List[Tuple] = []
    for token in tokens:
        symbol = token['symbol']
        token_address = token['address']
        chain = token['chain']

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –Ω–∞ MEXC
            mexc_symbol = f"{symbol}/USDT"
            mexc_ticker = mexc.fetch_ticker(mexc_symbol)
            mexc_price = mexc_ticker['last']
        except ccxt.ExchangeError:
            print(f"–ü–∞—Ä–∞ {mexc_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ MEXC, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –Ω–∞ DEX
        dex_price, dex_name, pair_address = get_dex_price(token_address, chain)
        if dex_price is not None:
            spread = abs(mexc_price - dex_price) / min(mexc_price, dex_price) * 100
            if spread > 5:
                alert_list.append((symbol, mexc_price, dex_price, dex_name, pair_address, spread, chain))

    if alert_list:
        message = "‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —Å —Å–ø—Ä–µ–¥–æ–º > 5%:\n"
        for symbol, mexc_p, dex_p, dex_n, pair_a, spr, chain in alert_list:
            message += (
                f"- {symbol} ({chain.upper()}):\n"
                f"  MEXC: ${mexc_p:.6f}\n"
                f"  {dex_n} (DEX): ${dex_p:.6f}\n"
                f"  –°–ø—Ä–µ–¥: {spr:.2f}%\n"
                f"  üîó DEX Screener: https://dexscreener.com/{chain}/{pair_a}\n"
            )
        return message
    return "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å —Å–ø—Ä–µ–¥–æ–º > 5%."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π /check –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –∂–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å —Å–ø—Ä–µ–¥–æ–º 5% –∏–ª–∏ –±–æ–ª—å—à–µ.')
    context.job_queue.run_repeating(auto_check_spread, interval=300, first=0)

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tokens = load_tokens()
    if not tokens:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã.")
        return
    message = check_spread_logic(tokens)
    await update.message.reply_text(message)

async def auto_check_spread(context: ContextTypes.DEFAULT_TYPE):
    tokens = load_tokens()
    if not tokens:
        print("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    message = check_spread_logic(tokens)
    await context.bot.send_message(chat_id=CHAT_ID, text=message)

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check", check))
    application.run_polling()

if __name__ == '__main__':
    main()